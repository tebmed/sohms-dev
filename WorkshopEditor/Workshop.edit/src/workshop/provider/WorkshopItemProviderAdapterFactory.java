/**
 */
package workshop.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import workshop.util.WorkshopAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkshopItemProviderAdapterFactory extends WorkshopAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorkshopItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Layout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutItemProvider layoutItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Layout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutAdapter() {
		if (layoutItemProvider == null) {
			layoutItemProvider = new LayoutItemProvider(this);
		}

		return layoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Edge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeItemProvider edgeItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Edge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeAdapter() {
		if (edgeItemProvider == null) {
			edgeItemProvider = new EdgeItemProvider(this);
		}

		return edgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Ports} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortsItemProvider portsItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Ports}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortsAdapter() {
		if (portsItemProvider == null) {
			portsItemProvider = new PortsItemProvider(this);
		}

		return portsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.InputPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPortItemProvider inputPortItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.InputPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPortAdapter() {
		if (inputPortItemProvider == null) {
			inputPortItemProvider = new InputPortItemProvider(this);
		}

		return inputPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.OutputPorts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPortsItemProvider outputPortsItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.OutputPorts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPortsAdapter() {
		if (outputPortsItemProvider == null) {
			outputPortsItemProvider = new OutputPortsItemProvider(this);
		}

		return outputPortsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Workstation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkstationItemProvider workstationItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Workstation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkstationAdapter() {
		if (workstationItemProvider == null) {
			workstationItemProvider = new WorkstationItemProvider(this);
		}

		return workstationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Machines} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachinesItemProvider machinesItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Machines}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachinesAdapter() {
		if (machinesItemProvider == null) {
			machinesItemProvider = new MachinesItemProvider(this);
		}

		return machinesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Storage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageItemProvider storageItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Storage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageAdapter() {
		if (storageItemProvider == null) {
			storageItemProvider = new StorageItemProvider(this);
		}

		return storageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Assembly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblyItemProvider assemblyItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Assembly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyAdapter() {
		if (assemblyItemProvider == null) {
			assemblyItemProvider = new AssemblyItemProvider(this);
		}

		return assemblyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.EmptyNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyNodeItemProvider emptyNodeItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.EmptyNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyNodeAdapter() {
		if (emptyNodeItemProvider == null) {
			emptyNodeItemProvider = new EmptyNodeItemProvider(this);
		}

		return emptyNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.AssemblyMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblyMachineItemProvider assemblyMachineItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.AssemblyMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyMachineAdapter() {
		if (assemblyMachineItemProvider == null) {
			assemblyMachineItemProvider = new AssemblyMachineItemProvider(this);
		}

		return assemblyMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.StorageMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageMachineItemProvider storageMachineItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.StorageMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageMachineAdapter() {
		if (storageMachineItemProvider == null) {
			storageMachineItemProvider = new StorageMachineItemProvider(this);
		}

		return storageMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.AGV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AGVItemProvider agvItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.AGV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAGVAdapter() {
		if (agvItemProvider == null) {
			agvItemProvider = new AGVItemProvider(this);
		}

		return agvItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Conveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConveyorItemProvider conveyorItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Conveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConveyorAdapter() {
		if (conveyorItemProvider == null) {
			conveyorItemProvider = new ConveyorItemProvider(this);
		}

		return conveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.LinkerMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkerMachineItemProvider linkerMachineItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.LinkerMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkerMachineAdapter() {
		if (linkerMachineItemProvider == null) {
			linkerMachineItemProvider = new LinkerMachineItemProvider(this);
		}

		return linkerMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Exchanger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExchangerItemProvider exchangerItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Exchanger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExchangerAdapter() {
		if (exchangerItemProvider == null) {
			exchangerItemProvider = new ExchangerItemProvider(this);
		}

		return exchangerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workshop.Feeder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeederItemProvider feederItemProvider;

	/**
	 * This creates an adapter for a {@link workshop.Feeder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeederAdapter() {
		if (feederItemProvider == null) {
			feederItemProvider = new FeederItemProvider(this);
		}

		return feederItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (layoutItemProvider != null) layoutItemProvider.dispose();
		if (edgeItemProvider != null) edgeItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (portsItemProvider != null) portsItemProvider.dispose();
		if (inputPortItemProvider != null) inputPortItemProvider.dispose();
		if (outputPortsItemProvider != null) outputPortsItemProvider.dispose();
		if (workstationItemProvider != null) workstationItemProvider.dispose();
		if (machinesItemProvider != null) machinesItemProvider.dispose();
		if (storageItemProvider != null) storageItemProvider.dispose();
		if (assemblyItemProvider != null) assemblyItemProvider.dispose();
		if (emptyNodeItemProvider != null) emptyNodeItemProvider.dispose();
		if (assemblyMachineItemProvider != null) assemblyMachineItemProvider.dispose();
		if (storageMachineItemProvider != null) storageMachineItemProvider.dispose();
		if (agvItemProvider != null) agvItemProvider.dispose();
		if (conveyorItemProvider != null) conveyorItemProvider.dispose();
		if (linkerMachineItemProvider != null) linkerMachineItemProvider.dispose();
		if (exchangerItemProvider != null) exchangerItemProvider.dispose();
		if (feederItemProvider != null) feederItemProvider.dispose();
	}

}
